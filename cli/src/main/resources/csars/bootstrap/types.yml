tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03

template_name: toscaruntime-bootstrap-type
template_version: 1.0.0-SNAPSHOT
template_author: MKV

imports:
  - tosca-normative-types:*

node_types:

  com.toscaruntime.docker.nodes.DockerDaemon:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      The docker software component to install/ start/ stop docker daemon
    properties:
      port:
        type: integer
        default: 2376
    attributes:
      docker_address: { concat: [ get_attribute: [HOST, ip_address], ":", get_property: [SELF, port]] }
      docker_url: { concat: ["http://", get_attribute: [HOST, ip_address], ":", get_property: [SELF, port] ] }
      public_docker_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, port] ] }
    capabilities:
      host: com.toscaruntime.docker.capabilities.DeployContainer
    requirements:
      discovery_service:
        type: com.toscaruntime.consul.capabilities.ConsulDiscoveryService
        relationship_type: com.toscaruntime.docker.relationships.AdvertiseConsul
    interfaces:
      Standard:
        create: daemon/scripts/create_docker_daemon.sh
        configure:
          inputs:
            DAEMON_PORT: { get_property: [SELF, port] }
          implementation: daemon/scripts/configure_docker_daemon.sh
        start: daemon/scripts/start_docker_daemon.sh
        stop: daemon/scripts/stop_docker_daemon.sh

  com.toscaruntime.docker.nodes.DockerComponent:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Softwares that are packaged as docker image ready to deploy
    properties:
      docker_image:
        type: string
      docker_command:
        type: string
        required: false
      docker_labels:
        type: string
        required: false
      port_mapping:
        type: string
        required: false
      docker_container_name:
        type: string
        required: false
    requirements:
      host:
        type: com.toscaruntime.docker.capabilities.DeployContainer
        relationship_type: com.toscaruntime.docker.relationships.DeployedOnDaemon
    interfaces:
      Standard:
        create:
          inputs:
            DOCKER_IMAGE: { get_property: [SELF, docker_image] }
            DOCKER_COMMAND: { get_property: [SELF, docker_command] }
            DOCKER_PORTS: { get_property: [SELF, port_mapping] }
            DOCKER_LABELS: { get_property: [SELF, docker_labels] }
            DOCKER_URL: { get_attribute: [HOST, docker_url] }
            PUBLIC_DOCKER_URL: { get_attribute: [HOST, public_docker_url] }
            DOCKER_NETWORK_ID: { get_attribute: [HOST, docker_network_id] }
            DOCKER_CONTAINER_NAME: { get_property: [SELF, docker_container_name] }
          implementation: component/scripts/create_docker_component.sh

  com.toscaruntime.docker.nodes.ProxyWebApp:
    derived_from: com.toscaruntime.docker.nodes.DockerComponent
    properties:
      port_mapping:
        type: string
        default: 9000:9000
        constraints:
          - equal: 9000:9000
      docker_image:
        type: string
        default: toscaruntime/proxy
      docker_container_name:
        type: string
        default: toscaruntime_proxy
      docker_labels:
        type: string
        default: |
          --label com.toscaruntime.componentType=proxy
    attributes:
      proxy_url: { concat: ["http://", get_attribute: [HOST, ip_address], ":9000"] }
      public_proxy_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":9000"] }
    requirements:
      host:
        type: com.toscaruntime.docker.capabilities.DeployContainer

  com.toscaruntime.docker.nodes.SwarmManager:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      swarm_port:
        type: integer
        default: 2375
    attributes:
      docker_url: { concat: ["http://", get_attribute: [HOST, ip_address], ":", get_property: [SELF, swarm_port] ] }
      public_docker_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, swarm_port] ] }
    requirements:
      host:
        type: com.toscaruntime.docker.capabilities.DeployContainer
        relationship_type: com.toscaruntime.docker.relationships.DeployedOnDaemon
      discovery_service:
        type: com.toscaruntime.consul.capabilities.ConsulDiscoveryService
        relationship_type: com.toscaruntime.docker.relationships.SwarmUseConsul
    capabilities:
      host: com.toscaruntime.docker.capabilities.DeployContainer

  com.toscaruntime.consul.nodes.ConsulAgent:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Consul discovery service installation
    properties:
      download_url:
        type: string
        default: https://releases.hashicorp.com/consul/0.6.0/consul_0.6.0_linux_amd64.zip
      agent_mode:
        type: string
        constraints:
          - valid_values: ["server", "client"]
        default: server
      server_count:
        type: integer
        constraints:
          - greater_than: 0
        default: 1
      data_dir:
        type: string
        default: /var/consul
    requirements:
      formCluster:
        type: com.toscaruntime.consul.capabilities.FormCluster
        relationship_type: com.toscaruntime.consul.relationships.JoinCluster
    capabilities:
      discovery_service: com.toscaruntime.consul.capabilities.ConsulDiscoveryService
      formCluster: com.toscaruntime.consul.capabilities.FormCluster
    attributes:
      consul_client_address: { get_operation_output: [ SELF, Standard, start, CONSUL_CLIENT_ADDRESS ] }
      consul_server_address: { get_operation_output: [ SELF, Standard, start, CONSUL_SERVER_ADDRESS ] }
    interfaces:
      Standard:
        create:
          inputs:
            CONSUL_DATA_DIR: { get_property: [SELF, data_dir] }
            CONSUL_DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: consul/scripts/create_consul.sh
        start:
          inputs:
            CONSUL_AGENT_MODE: { get_property: [SELF, agent_mode] }
            CONSUL_SERVERS_COUNT: { get_property: [SELF, server_count] }
            CONSUL_DATA_DIR: { get_property: [SELF, data_dir] }
            CONSUL_BIND_ADDRESS: { get_attribute: [HOST, ip_address] }
          implementation: consul/scripts/start_consul_agent.sh

capability_types:

  com.toscaruntime.docker.capabilities.DeployContainer:
    derived_from: tosca.capabilities.Container

  com.toscaruntime.consul.capabilities.ConsulDiscoveryService:
    derived_from: tosca.capabilities.Root

  com.toscaruntime.consul.capabilities.FormCluster:
    derived_from: tosca.capabilities.Root

relationship_types:

  com.toscaruntime.docker.relationships.DeployedOnDaemon:
    derived_from: tosca.relationships.HostedOn

  com.toscaruntime.docker.relationships.ProxyDeployedOnSwarmDaemon:
    derived_from: com.toscaruntime.docker.relationships.DeployedOnDaemon
    valid_targets: [com.toscaruntime.docker.nodes.SwarmManager]

  com.toscaruntime.docker.relationships.ProxyDeployedOnDaemon:
    derived_from: com.toscaruntime.docker.relationships.DeployedOnDaemon
    valid_targets: [com.toscaruntime.docker.nodes.DockerDaemon]
    interfaces:
      Configure:
        post_configure_target:
          inputs:
            PROXY_URL: { get_attribute: [SOURCE, proxy_url] }
            PUBLIC_PROXY_URL: { get_attribute: [SOURCE, public_proxy_url] }
          implementation: proxy/scripts/configure_proxy.sh

  com.toscaruntime.docker.relationships.AdvertiseConsul:
    derived_from: tosca.relationships.Root
    interfaces:
      Configure:
        add_target:
          inputs:
            DOCKER_ADDRESS: { get_attribute: [SOURCE, docker_address] }
            CONSUL_CLIENT_ADDRESS: { get_attribute: [TARGET, consul_client_address] }
          implementation: consul/scripts/connect_docker_daemon_to_consul.sh

  com.toscaruntime.docker.relationships.SwarmUseConsul:
    derived_from: tosca.relationships.Root
    attributes:
# This will be published also to source and target node
      docker_network_id: { get_operation_output: [ SELF, Configure, add_target, DOCKER_NETWORK_ID ] }
      docker_network_name: { get_operation_output: [ SELF, Configure, add_target, DOCKER_NETWORK_NAME ] }
    interfaces:
      Configure:
        add_target:
          inputs:
            SWARM_PORT: { get_property: [SOURCE, swarm_port] }
            CONSUL_CLIENT_ADDRESS: { get_attribute: [TARGET, consul_client_address] }
          implementation: consul/scripts/swarm_use_consul.sh

  com.toscaruntime.consul.relationships.JoinCluster:
    derived_from: tosca.relationships.Root
    interfaces:
      Configure:
        add_target:
          inputs:
            CONSUL_SERVER_ADDRESS: { get_attribute: [TARGET, consul_server_address] }
          implementation: consul/scripts/join_consul_cluster.sh
