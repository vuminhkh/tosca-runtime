tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03

template_name: aws-swarm-bootstrap-template
template_version: ${version}
template_author: MKV

imports:
  - toscaruntime-bootstrap-type:*
  - toscaruntime-aws-provider-types:*
  - toscaruntime-script-plugin-types:*

topology_template:
  description: Wordpress deployment template for openstack
  inputs:
    plugin_configs:
      type: com.toscaruntime.common.datatypes.PluginConfiguration
    image_id:
      type: string
    instance_type:
      type: string
    key_name:
      type: string
    security_groups:
      type: list
      entry_schema:
        type: string
    cloud_init:
      type: string
    swarm_nodes_count:
      type: integer

  outputs:
    public_daemon_url:
      description: The URL to access the docker daemon
      value: { get_attribute: [ swarmManager, public_docker_url ] }
    public_proxy_url:
      description: The public URL to access the proxy
      value: { get_attribute: [ proxy, public_proxy_url ] }
    docker_network_id:
      description: The overlay network that is created so that containers that use the swarm daemon can talk to each other
      value: { get_attribute: [ swarmManager, docker_network_id ] }
    docker_network_name:
      description: The overlay network that is created so that containers that use the swarm daemon can talk to each other
      value: { get_attribute: [ swarmManager, docker_network_name ] }
    manager_ip_addresses:
      description: The private ip addresses of the manager machine
      value: { get_attribute: [ managerMachine, ip_address ] }
    manager_public_ip_addresses:
      description: The public ip addresses of the manager machine
      value: { get_attribute: [ managerMachine, public_ip_address ] }
    node_ip_addresses:
      description: The private ip addresses of swarm node machines
      value: { get_attribute: [ swarmNodeMachine, ip_address ] }
    node_public_ip_addresses:
      description: The public ip addressse of swarm node machines
      value: { get_attribute: [ swarmNodeMachine, public_ip_address ] }

  node_templates:

    publicNetwork:
      type: com.toscaruntime.aws.nodes.PublicNetwork

    managerMachine:
      type: com.toscaruntime.aws.nodes.Instance
      properties:
        image_id: { get_input: image_id }
        instance_type: { get_input: instance_type }
        key_name: { get_input: key_name }
        security_groups: { get_input: security_groups }
        user_data: { get_input: cloud_init }
        plugins: { get_input: plugin_configs }
      requirements:
        - network: publicNetwork

    managerDaemon:
      type: com.toscaruntime.docker.nodes.DockerDaemon
      properties:
        pull_images: toscaruntime/deployer:${version}
      requirements:
        - host: managerMachine
        - discovery_service: consulServer

    proxy:
      type: com.toscaruntime.docker.nodes.ProxyWebApp
      properties:
        docker_image_tag: ${version}
      requirements:
        - host: managerMachine
        - daemon: swarmManager

    consulServer:
      type: com.toscaruntime.consul.nodes.ConsulAgent
      properties:
        agent_mode: server
      requirements:
        - host: managerMachine

    swarmManager:
      type: com.toscaruntime.docker.nodes.SwarmManager
      requirements:
        - host: managerMachine
        - daemon: managerDaemon
        - discovery_service: consulServer

    swarmNodeMachine:
      type: com.toscaruntime.aws.nodes.Instance
      properties:
        image_id: { get_input: image_id }
        instance_type: { get_input: instance_type }
        key_name: { get_input: key_name }
        security_groups: { get_input: security_groups }
        user_data: { get_input: cloud_init }
        plugins: { get_input: plugin_configs }
      requirements:
        - network: publicNetwork
      capabilities:
        scalable:
          properties:
            max_instances: 999
            min_instances: 1
            default_instances: { get_input: swarm_nodes_count }

    swarmNodeDaemon:
      type: com.toscaruntime.docker.nodes.DockerDaemon
      properties:
        pull_images: toscaruntime/deployer:${version}
      requirements:
        - host: swarmNodeMachine
        - discovery_service: consulClient

    consulClient:
      type: com.toscaruntime.consul.nodes.ConsulAgent
      properties:
        agent_mode: client
      requirements:
        - host: swarmNodeMachine
        - formCluster: consulServer