tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03

template_name: tosca-normative-types
template_version: 1.0.0.wd03-SNAPSHOT
template_author: TOSCA TC

description: Contains the normative types definition.

node_types:
  Root:
    abstract: true
    tags:
      icon: /images/root.png
    description: >
      This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends.
      This allows all TOSCA nodes to have a consistent set of features for modeling and management
      (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).
    attributes:
      tosca_id:
        type: string
      tosca_name:
        type: string
    requirements:
      dependency:
        type: tosca.capabilities.Root
        lower_bound: 0
        upper_bound: unbounded
    capabilities:
      root:
        type: tosca.capabilities.Root
    interfaces:
      tosca.interfaces.node.lifecycle.Standard:
        description: >
          This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.
        create:
          description: Standard lifecycle create operation.
        configure:
          description: Standard lifecycle configure operation (pre-start).
        start:
          description: Standard lifecycle start operation.
        post_start:
          description: Standard lifecycle post-configure operation (post-start)
        stop:
          description: Standard lifecycle stop operation.
        delete:
          description: Standard lifecycle delete operation.

  # Infrastructure components
  Compute:
    derived_from: Root
    description: >
      Represents a real or virtual machine or 'server'. Informations specified on the Compute
      node will be used to find the machine that fits the given requirements in the cloud
      available machines. If no sizing informations are specified the cloud's provider default
      machine will be used. It is strongly recommended to specify the required cpus and memory
      at least.
    tags:
      icon: /images/compute.png
    properties:
      num_cpus:
        type: integer
        required: false
        constraints:
          -  greater_than: 0
        description: Number of (actual or virtual) CPUs associated with the Compute node.
      mem_size:
        type: integer
        required: false
        constraints:
          - greater_than: 0
        description: Size of memory, in Megabytes (MB), available to applications running on the Compute node.
      disk_size:
        type: integer
        required: false
        constraints:
          - greater_than: 0
        description: Size of the local disk, in Gigabytes (GB), available to applications running on the Compute node.
      os_arch:
        type: string
        constraints:
          - valid_values: ["x86_32", "x86_64"]
        description: The host Operating System (OS) architecture.
      os_type:
        type: string
        constraints:
          - valid_values: ["linux", "aix", "mac os", "windows"]
        description: The host Operating System (OS) type.
      os_distribution:
        type: string
        required: false
        description: The host Operating System (OS) distribution.
      os_version:
        type: string
        required: false
        description: The host Operating System version.
    attributes:
      ip_address:
        type: string
        description: >
          The primary IP address assigned by the cloud provider that applications may use to access the Compute node.
          Note: This is used by the platform provider to convey the primary address used to access the compute node.  Future working drafts will address implementations that support floating or multiple IP addresses.
    requirements:
      network:
        type: tosca.capabilities.Connectivity
        relationship_type: tosca.relationships.Network
        lower_bound: 0
        upper_bound: unbounded
    capabilities:
      host: tosca.capabilities.Container
      attach: tosca.capabilities.Attachment

  BlockStorage:
    derived_from: Root
    description: >
      The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared)
      offering evenly sized blocks of data from which raw storage volumes can be created.
    tags:
      icon: /images/volume.png
    properties:
      size:
        type: integer
        required: false
        constraints:
          - greater_than: 0
        description: The requested storage size in MegaBytes (MB).
      volume_id:
        type: string
        required: false
        description: ID of an existing volume (that is in the accessible scope of the requesting application).
      snapshot_id:
        type: string
        required: false
        description: Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).
    attributes:
      volume_id:
        type: string
        description: ID provided by the orchestrator for newly created volumes.
    requirements:
      attachment:
        type: tosca.capabilities.Attachment
        relationship_type: tosca.relationships.AttachTo

  tosca.nodes.ObjectStorage:
    derived_from: Root
    abstract: true
    description: >
      The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data)
      without consideration for the underlying filesystem or devices.
    tags:
      icon: /images/objectstore.png
    properties:
      store_name:
        type: string
        description: The logical name of the object store (or container).
      store_size:
        type: integer
        required: false
        constraints:
          - greater_or_equal: 0
        description: The requested initial storage size in Gigabytes.
      store_maxsize:
        type: integer
        required: false
        constraints:
          - greater_than: 0
        description: The requested maximum storage size in Gigabytes.

  tosca.nodes.SoftwareComponent:
    derived_from: Root
    abstract: true
    description: >
      The TOSCA SoftwareComponent Node Type represents a generic software component
      that can be managed and run by a TOSCA Compute Node Type.
    tags:
      icon: /images/software.png
    requirements:
      host:
        type: tosca.capabilities.Container
        relationship_type: tosca.relationships.HostedOn

  tosca.nodes.WebServer:
    derived_from: tosca.nodes.SoftwareComponent
    abstract: true
    description: >
      The TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes
    capabilities:
      app_endpoint: tosca.capabilities.Endpoint
      secure_endpoint: tosca.capabilities.Endpoint
      host: tosca.capabilities.Container

  tosca.nodes.WebApplication:
    derived_from: Root
    description: >
      The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node.  Specific types of web applications such as Java, etc. could be derived from this type.
    tags:
      icon: /images/network.png
    requirements:
      host:
        type: tosca.capabilities.Container
        relationship_type: tosca.relationships.HostedOn

  tosca.nodes.DBMS:
    derived_from: tosca.nodes.SoftwareComponent
    abstract: true
    description: >
      The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.
    tags:
      icon: /images/relational_db.png
    properties:
      dbms_root_password:
        type: string
        required: false
        description: the root password for the DBMS service.
      dbms_port:
        type: integer
        required: false
        description: the port the DBMS service will listen to for data and requests
    capabilities:
      host: tosca.capabilities.Container
      endpoint: tosca.capabilities.DatabaseEndpoint

  tosca.nodes.Database:
    derived_from: Root
    description: >
      Base type for the schema and content associated with a DBMS.
      The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.
    tags:
      icon: /images/relational_db.png
    properties:
      db_user:
        type: string
        required: false
        description: The special user account used for database administration.
      db_password:
        type: string
        required: false
        description: The password associated with the user account provided in the 'db_user' property.
      db_port:
        type: integer
        required: false
        description: The port on which the underlying database service will listen to data.
      db_name:
        type: string
        required: false
        description: The logical name of the database.
    requirements:
      host:
        type: tosca.capabilities.Container
        relationship_type: tosca.relationships.HostedOn
    capabilities:
      database_endpoint: tosca.capabilities.DatabaseEndpoint

  tosca.nodes.Network:
    derived_from: Root
    description: >
      The TOSCA Network node represents a simple, logical network service.
    tags:
      icon: /images/network.png
    properties:
      ip_version:
        type: integer
        required: false
        default: 4
        constraints:
          - valid_values: [ 4, 6 ]
      cidr:
        type: string
        required: false
      gateway_ip:
        type: string
        required: false
      network_name:
        type: string
        required: false
      network_id:
        type: string
        required: false
    capabilities:
      connection:
        type: tosca.capabilities.Connectivity

capability_types:
  tosca.capabilities.Root:
    description: This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.
  tosca.capabilities.Container:
    derived_from: tosca.capabilities.Root
    description: >
      A list of one or more names of Node Types that are supported as  containees that declare the Container type as a Capability.
    properties:
      valid_node_types:
        type: string
        required: false
  tosca.capabilities.Endpoint:
    derived_from: tosca.capabilities.Root
    properties:
      protocol:
        type: string
        default: tcp
      port:
        type: integer
        required: false
        constraints:
         - greater_or_equal: 1
         - less_or_equal: 65535
      secure:
        type: boolean
        default: false
      url_path:
        type: string
        required: false
  tosca.capabilities.DatabaseEndpoint:
    derived_from: tosca.capabilities.Endpoint
    description: This is the default TOSCA type that should be used or extended to define a specialized database endpoint capability.
  tosca.capabilities.Attachment:
    derived_from: tosca.capabilities.Root
    description: This is the default TOSCA type that should be used or extended to define a network endpoint capability.
  tosca.capabilities.Scalable:
    derived_from: tosca.capabilities.Root
    properties:
      min_intances:
        type: integer
        default: 1
      max_intances:
        type: integer
        default: 1
      default_instances:
        type: integer
        default: 1
  tosca.capabilities.Connectivity:
    derived_from: tosca.capabilities.Root

relationship_types:
  Root:
    abstract: true
    description: This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.
    valid_targets: [ tosca.capabilities.Root ]
    interfaces:
      tosca.interfaces.relationship.Configure:
        description: >
          The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.
        pre_configure_source:
          description: Operation to pre-configure the source endpoint.
        pre_configure_target:
          description: Operation to pre-configure the target endpoint.
        post_configure_source:
          description: Operation to post-configure the source endpoint.
        post_configure_target:
          description: Operation to post-configure the target endpoint.
        add_target:
          description: Operation to notify the source node of a target node being added via a relationship.
        add_source:
          description: Operation to notify the target node of a source node which is now  available via a relationship.
        remove_target:
          description: Operation to notify the source node of a target node being removed from a relationship.
        remove_source:
          description: Operation to notify the target node of a source node being removed from a relationship.
        target_changed:
          description: Operation to notify source some property or attribute of the target.
        source_changed:
          description: Operation to notify target some property or attribute of the source.
  tosca.relationships.DependsOn:
    derived_from: Root
    description: >
      A generic depends on relationship.
  tosca.relationships.HostedOn:
    derived_from: tosca.relationships.DependsOn
    description: Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.
    valid_targets: [ tosca.capabilities.Container ]
  tosca.relationships.ConnectsTo:
    derived_from: tosca.relationships.DependsOn
    valid_targets: [ tosca.capabilities.Endpoint ]
  tosca.relationships.AttachTo:
    derived_from: Root
    valid_targets: [ tosca.capabilities.Attachment ]
  tosca.relationships.Network:
    derived_from: Root
    valid_targets: [ tosca.capabilities.Connectivity ]

artifact_types:
  tosca.artifacts.Root:
    description: The TOSCA Artifact Type all other TOSCA Artifact Types derive from.
  tosca.artifacts.File:
    derived_from: tosca.artifacts.Root
    description: This artifact type is used when an artifact definition needs to have its associated file simply treated as a file and no special handling/handlers are invoked.
  tosca.artifacts.ShellScript:
    derived_from: tosca.artifacts.Root
    description: A shell script (.sh file)
    file_ext: [ sh ]
